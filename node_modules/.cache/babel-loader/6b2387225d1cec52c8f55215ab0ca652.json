{"remainingRequest":"/Users/sebastiankahkonen/Documents/GitHub/Flappybird-testgame/node_modules/babel-loader/lib/index.js!/Users/sebastiankahkonen/Documents/GitHub/Flappybird-testgame/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/sebastiankahkonen/Documents/GitHub/Flappybird-testgame/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sebastiankahkonen/Documents/GitHub/Flappybird-testgame/node_modules/vue-keypress/src/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sebastiankahkonen/Documents/GitHub/Flappybird-testgame/node_modules/vue-keypress/src/index.vue","mtime":1636985550266},{"path":"/Users/sebastiankahkonen/Documents/GitHub/Flappybird-testgame/babel.config.js","mtime":1636367027686},{"path":"/Users/sebastiankahkonen/Documents/GitHub/Flappybird-testgame/node_modules/cache-loader/dist/cjs.js","mtime":1636985555851},{"path":"/Users/sebastiankahkonen/Documents/GitHub/Flappybird-testgame/node_modules/babel-loader/lib/index.js","mtime":1636985556087},{"path":"/Users/sebastiankahkonen/Documents/GitHub/Flappybird-testgame/node_modules/cache-loader/dist/cjs.js","mtime":1636985555851},{"path":"/Users/sebastiankahkonen/Documents/GitHub/Flappybird-testgame/node_modules/vue-loader/lib/index.js","mtime":1636985550243}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90eXBlb2YgZnJvbSAiL1VzZXJzL3NlYmFzdGlhbmthaGtvbmVuL0RvY3VtZW50cy9HaXRIdWIvRmxhcHB5YmlyZC10ZXN0Z2FtZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mIjsKaW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9Vc2Vycy9zZWJhc3RpYW5rYWhrb25lbi9Eb2N1bWVudHMvR2l0SHViL0ZsYXBweWJpcmQtdGVzdGdhbWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5ldmVyeS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZi5qcyI7CnZhciBzdXBwb3J0ZWRNb2RpZmllcnMgPSBbJ2FsdEtleScsICdtZXRhS2V5JywgJ2N0cmxLZXknLCAnc2hpZnRLZXknXTsKZXhwb3J0IGRlZmF1bHQgewogIHByb3BzOiB7CiAgICBrZXlFdmVudDogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgICJkZWZhdWx0IjogJ2tleXVwJwogICAgfSwKICAgIC8vIE9ubHkgZm9yIHNpbmdsZSBrZXkgY29kZToKICAgIGtleUNvZGU6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICAiZGVmYXVsdCI6IG51bGwKICAgIH0sCiAgICBtb2RpZmllcnM6IHsKICAgICAgdHlwZTogQXJyYXksCiAgICAgIC8vIFsnc2hpZnRLZXknLCAnY3RybEtleScsICdhbHRLZXknLCAnbWV0YUtleSddCiAgICAgICJkZWZhdWx0IjogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CiAgICB9LAogICAgcHJldmVudERlZmF1bHQ6IHsKICAgICAgdHlwZTogQm9vbGVhbgogICAgfSwKICAgIC8vIE9ubHkgZm9yIG11bHRpcGxlIGtleSBjb2RlczoKICAgIG11bHRpcGxlS2V5czogewogICAgICB0eXBlOiBBcnJheSwKICAgICAgImRlZmF1bHQiOiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gW107CiAgICAgIH0KICAgIH0KICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBrZXlMaXN0ZW5lcnM6IFtdCiAgICB9OwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHRoaXMuc2V0dXBMaXN0ZW5lcnMoKTsKICB9LAogIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkKCkgewogICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMua2V5TGlzdGVuZXJzKSwKICAgICAgICBfc3RlcDsKCiAgICB0cnkgewogICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykgewogICAgICAgIHZhciBfc3RlcCR2YWx1ZSA9IF9zdGVwLnZhbHVlLAogICAgICAgICAgICBrZXlFdmVudCA9IF9zdGVwJHZhbHVlLmtleUV2ZW50LAogICAgICAgICAgICBsaXN0ZW5lciA9IF9zdGVwJHZhbHVlLmxpc3RlbmVyOwogICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKGtleUV2ZW50LCBsaXN0ZW5lcik7CiAgICAgIH0KICAgIH0gY2F0Y2ggKGVycikgewogICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgfSBmaW5hbGx5IHsKICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIC8qKiBJbml0aWFsIFNldHVwIG9mIHRoZSBsaXN0ZW5lcnMgKi8KCiAgICAvKiogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovCiAgICBzZXR1cExpc3RlbmVyczogZnVuY3Rpb24gc2V0dXBMaXN0ZW5lcnMoKSB7CiAgICAgIHZhciBleHBlY3RlZEV2ZW50ID0gewogICAgICAgIGtleUV2ZW50OiB0aGlzLmtleUV2ZW50LAogICAgICAgIC8vIElmIHNpbmdsZToKICAgICAgICBrZXlDb2RlOiB0aGlzLmtleUNvZGUsCiAgICAgICAgcHJldmVudERlZmF1bHQ6IHRoaXMucHJldmVudERlZmF1bHQsCiAgICAgICAgbW9kaWZpZXJzOiB0aGlzLm1vZGlmaWVycywKICAgICAgICAvLyBJZiBtdWx0aXBsZToKICAgICAgICBtdWx0aXBsZUtleXM6IHRoaXMubXVsdGlwbGVLZXlzCiAgICAgIH07CiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihleHBlY3RlZEV2ZW50KTsKICAgIH0sCiAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKGV4cGVjdGVkRXZlbnQpIHsKICAgICAgdmFyIGxpc3RlbmVyID0gdGhpcy5ldmVudEhhbmRsZXIoZXhwZWN0ZWRFdmVudCk7CiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV4cGVjdGVkRXZlbnQua2V5RXZlbnQsIGxpc3RlbmVyKTsKICAgICAgdGhpcy5rZXlMaXN0ZW5lcnMucHVzaCh7CiAgICAgICAgZXhwZWN0ZWRFdmVudDogZXhwZWN0ZWRFdmVudCwKICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIKICAgICAgfSk7CiAgICB9LAoKICAgIC8qKiBIYW5kbGluZyBwZXIga2V5cHJlc3MgZXZlbnQgKi8KCiAgICAvKiogKioqKioqKioqKioqKioqKioqKioqKioqKioqICovCiAgICBldmVudEhhbmRsZXI6IGZ1bmN0aW9uIGV2ZW50SGFuZGxlcihleHBlY3RlZEV2ZW50KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgdmFyIGVtaXRSZXNwb25zZSA9IGZ1bmN0aW9uIGVtaXRSZXNwb25zZShlbWl0RXZlbnQsIG1lc3NhZ2UpIHsKICAgICAgICAgIF90aGlzLiRlbWl0KGVtaXRFdmVudCwgewogICAgICAgICAgICBldmVudDogZXZlbnQsCiAgICAgICAgICAgIGV4cGVjdGVkRXZlbnQ6IGV4cGVjdGVkRXZlbnQsCiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UKICAgICAgICAgIH0pOwogICAgICAgIH07IC8vIEVtaXQgdGhlIGVtaXRFdmVudCAnQGFueScgaW4gYW55IGNhc2U6CgoKICAgICAgICBlbWl0UmVzcG9uc2UoJ2FueScsICdBbnkga2V5IHdhcyBwcmVzc2VkLicpOwogICAgICAgIHZhciBpbk11bHRpcGxlS2V5c01vZGUgPSBleHBlY3RlZEV2ZW50Lm11bHRpcGxlS2V5cy5sZW5ndGggPiAwOyAvLyBJbiAiYW55IGtleSIgbW9kZSwgZW1pdCAnQHN1Y2Nlc3MnIGFuZCByZXR1cm4KCiAgICAgICAgdmFyIGluQW55S2V5TW9kZSA9ICFleHBlY3RlZEV2ZW50LmtleUNvZGUgJiYgIWluTXVsdGlwbGVLZXlzTW9kZTsKCiAgICAgICAgaWYgKGluQW55S2V5TW9kZSkgewogICAgICAgICAgZW1pdFJlc3BvbnNlKCdzdWNjZXNzJywgJ0FueSBrZXkgd2FzIHByZXNzZWQuJyk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfSAvLyBTZXQgZXhwZWN0ZWQgaW5wdXRzIGFycmF5IHJlc3BlY3RpdmUgdG8gcHJvcHMgYmVpbiAic2luZ2xlIiBvciAibXVsdGlwbGUiCgoKICAgICAgICB2YXIgZXhwZWN0ZWRJbnB1dHMgPSBbZXhwZWN0ZWRFdmVudF07CgogICAgICAgIGlmIChpbk11bHRpcGxlS2V5c01vZGUpIHsKICAgICAgICAgIGV4cGVjdGVkSW5wdXRzID0gZXhwZWN0ZWRFdmVudC5tdWx0aXBsZUtleXM7CiAgICAgICAgfQoKICAgICAgICB2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGV4cGVjdGVkSW5wdXRzKSwKICAgICAgICAgICAgX3N0ZXAyOwoKICAgICAgICB0cnkgewogICAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoKSB7CiAgICAgICAgICAgIHZhciBleHBlY3RlZElucHV0ID0gX3N0ZXAyLnZhbHVlOwogICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgY29ycmVjdCBrZXlzIGhhdmUgYmVlbiBjbGlja2VkOgogICAgICAgICAgICB2YXIgY29ycmVjdEtleVByZXNzZWQgPSBleHBlY3RlZElucHV0LmtleUNvZGUgPT09IGV2ZW50LmtleUNvZGU7CiAgICAgICAgICAgIGlmICghY29ycmVjdEtleVByZXNzZWQpIHJldHVybiAiY29udGludWUiOyAvLyBHZXQgbW9kaWZpZXJzOgoKICAgICAgICAgICAgdmFyIGhhc01vZGlmaWVycyA9IGV4cGVjdGVkSW5wdXQubW9kaWZpZXJzLmxlbmd0aCA+IDA7IC8vIENoZWNrIGlmIG9ubHkgdGhlIHNwZWNpZmllZCBtb2RpZmllcnMgd2VyZSBwcmVzc2VkCgogICAgICAgICAgICBpZiAoaGFzTW9kaWZpZXJzKSB7CiAgICAgICAgICAgICAgdmFyIG1vZGlmaWVyc1ByZXNzZWQgPSBzdXBwb3J0ZWRNb2RpZmllcnMuZXZlcnkoZnVuY3Rpb24gKHgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBldmVudFt4XSA9PSAoZXhwZWN0ZWRJbnB1dC5tb2RpZmllcnMuaW5kZXhPZih4KSAhPT0gLTEpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGlmICghbW9kaWZpZXJzUHJlc3NlZCkgcmV0dXJuICJjb250aW51ZSI7CiAgICAgICAgICAgIH0gLy8gU1VDQ0VTUyAtPiBpZiBpdCBnb3QgdG8gaGVyZSwgdGhpcyB3YXMgdGhlIGNvcnJlY3Qga2V5LgogICAgICAgICAgICAvLyBTZXQgUHJldmVudC1EZWZhdWx0CgoKICAgICAgICAgICAgaWYgKGV4cGVjdGVkRXZlbnQucHJldmVudERlZmF1bHQpIHsKICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBlbWl0UmVzcG9uc2UoJ3N1Y2Nlc3MnLCAnQ29ycmVjdCBrZXkocykgcHJlc3NlZC4nKTsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICB2OiB2b2lkIDAKICAgICAgICAgICAgfTsKICAgICAgICAgIH07CgogICAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgdmFyIF9yZXQgPSBfbG9vcCgpOwoKICAgICAgICAgICAgaWYgKF9yZXQgPT09ICJjb250aW51ZSIpIGNvbnRpbnVlOwogICAgICAgICAgICBpZiAoX3R5cGVvZihfcmV0KSA9PT0gIm9iamVjdCIpIHJldHVybiBfcmV0LnY7CiAgICAgICAgICB9IC8vIEZBSUxVUkU6IElmIGl0IGdvdCB0byBoZXJlLCB0aGUgY29ycmVjdCBrZXkgd2Fzbid0IHByZXNzZWQ6CgogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgX2l0ZXJhdG9yMi5lKGVycik7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIF9pdGVyYXRvcjIuZigpOwogICAgICAgIH0KCiAgICAgICAgZW1pdFJlc3BvbnNlKCd3cm9uZycsICdXcm9uZyBrZXkocykgcHJlc3NlZC4nKTsKICAgICAgfTsKICAgIH0KICB9LAogIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgcmV0dXJuIG51bGw7CiAgfQp9Ow=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\nconst supportedModifiers = ['altKey', 'metaKey', 'ctrlKey', 'shiftKey']\n\nexport default {\n  props: {\n    keyEvent: {\n      type: String,\n      default: 'keyup',\n    },\n\n    // Only for single key code:\n    keyCode: {\n      type: Number,\n      default: null,\n    },\n    modifiers: {\n      type: Array, // ['shiftKey', 'ctrlKey', 'altKey', 'metaKey']\n      default: () => [],\n    },\n    preventDefault: {\n      type: Boolean,\n    },\n\n    // Only for multiple key codes:\n    multipleKeys: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  data: () => ({\n    keyListeners: [],\n  }),\n  mounted() {\n    this.setupListeners()\n  },\n  destroyed() {\n    for (const { keyEvent, listener } of this.keyListeners) {\n      window.removeEventListener(keyEvent, listener)\n    }\n  },\n  methods: {\n    /** Initial Setup of the listeners */\n    /** ****************************** */\n    setupListeners() {\n      const expectedEvent = {\n        keyEvent: this.keyEvent,\n\n        // If single:\n        keyCode: this.keyCode,\n        preventDefault: this.preventDefault,\n        modifiers: this.modifiers,\n        // If multiple:\n        multipleKeys: this.multipleKeys,\n      }\n      this.addEventListener(expectedEvent)\n    },\n    addEventListener(expectedEvent) {\n      let listener = this.eventHandler(expectedEvent)\n      window.addEventListener(expectedEvent.keyEvent, listener)\n      this.keyListeners.push({ expectedEvent, listener })\n    },\n\n    /** Handling per keypress event */\n    /** *************************** */\n    eventHandler(expectedEvent) {\n      return (event) => {\n        const emitResponse = (emitEvent, message) => {\n          this.$emit(emitEvent, {\n            event,\n            expectedEvent,\n            message,\n          })\n        }\n        // Emit the emitEvent '@any' in any case:\n        emitResponse('any', 'Any key was pressed.')\n\n        const inMultipleKeysMode = expectedEvent.multipleKeys.length > 0\n\n        // In \"any key\" mode, emit '@success' and return\n        const inAnyKeyMode = !expectedEvent.keyCode && !inMultipleKeysMode\n        if (inAnyKeyMode) {\n          emitResponse('success', 'Any key was pressed.')\n          return\n        }\n\n        // Set expected inputs array respective to props bein \"single\" or \"multiple\"\n        let expectedInputs = [expectedEvent]\n        if (inMultipleKeysMode) {\n          expectedInputs = expectedEvent.multipleKeys\n        }\n\n        for (const expectedInput of expectedInputs) {\n          // Check if the correct keys have been clicked:\n          const correctKeyPressed = expectedInput.keyCode === event.keyCode\n          if (!correctKeyPressed) continue\n\n          // Get modifiers:\n          let hasModifiers = expectedInput.modifiers.length > 0\n\n          // Check if only the specified modifiers were pressed\n          if (hasModifiers) {\n            const modifiersPressed = supportedModifiers.every(\n              (x) => event[x] == (expectedInput.modifiers.indexOf(x) !== -1)\n            )\n            if (!modifiersPressed) continue\n          }\n\n          // SUCCESS -> if it got to here, this was the correct key.\n\n          // Set Prevent-Default\n          if (expectedEvent.preventDefault) {\n            event.preventDefault()\n          }\n          emitResponse('success', 'Correct key(s) pressed.')\n          return\n        }\n\n        // FAILURE: If it got to here, the correct key wasn't pressed:\n        emitResponse('wrong', 'Wrong key(s) pressed.')\n      }\n    },\n  },\n  render: () => null,\n}\n</script>"],"sourceRoot":"node_modules/vue-keypress/src"}]}